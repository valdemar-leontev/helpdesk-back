// <auto-generated />
using System;
using Helpdesk.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Helpdesk.WebApi.DbMigrations
{
    [DbContext(typeof(AppDatabaseContext))]
    partial class AppDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Helpdesk.Domain.Models.Admin.UserDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("name");

                    b.Property<string>("ObjectSid")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("object_sid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("password");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_role_id");

                    b.HasIndex("Email", "ObjectSid")
                        .IsUnique()
                        .HasDatabaseName("ix_user_email_object_sid");

                    b.ToTable("user", "admin");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "valdemar.leontev@yandex.ru",
                            Name = "Valdemar",
                            Password = "WZRHGrsBESr8wYFZ9sx0tPURuZgG2lmzyvWpwXPKz8U=",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "leonetx@yandex.ru",
                            Name = "Bill",
                            Password = "WZRHGrsBESr8wYFZ9sx0tPURuZgG2lmzyvWpwXPKz8U=",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Admin.UserSessionDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("LoginDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("login_date");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(96)
                        .HasColumnType("character varying(96)")
                        .HasColumnName("refresh_token");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_session");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_session_user_id");

                    b.ToTable("user_session", "admin");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.FileDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Hash")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("hash");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("uid");

                    b.Property<int?>("UploadUserId")
                        .HasColumnType("integer")
                        .HasColumnName("upload_user_id");

                    b.HasKey("Id")
                        .HasName("pk_file");

                    b.HasIndex("Uid")
                        .IsUnique()
                        .HasDatabaseName("ix_file_uid");

                    b.HasIndex("UploadUserId")
                        .HasDatabaseName("ix_file_upload_user_id");

                    b.ToTable("file", "business");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTimeOffset(new DateTime(2023, 6, 30, 3, 46, 0, 307, DateTimeKind.Unspecified).AddTicks(8317), new TimeSpan(0, 0, 0, 0, 0)),
                            Hash = "",
                            Name = "Инструкция для пользования Helpdesk.pdf",
                            Uid = "c7f82c174aae445aa4ebe1d4f3a54ace",
                            UploadUserId = 2
                        });
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.NotificationDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("message");

                    b.Property<int>("RecipientUserId")
                        .HasColumnType("integer")
                        .HasColumnName("recipient_user_id");

                    b.HasKey("Id")
                        .HasName("pk_notification");

                    b.HasIndex("RecipientUserId")
                        .HasDatabaseName("ix_notification_recipient_user_id");

                    b.ToTable("notification", "business");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTimeOffset(new DateTime(2023, 6, 30, 3, 46, 0, 305, DateTimeKind.Unspecified).AddTicks(7807), new TimeSpan(0, 0, 0, 0, 0)),
                            IsDeleted = false,
                            IsRead = false,
                            Message = "Пользователь Vladimir отправил вам на согласование заявку на тему 'ТЗ программистам'",
                            RecipientUserId = 2
                        });
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.ProfileDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("last_name");

                    b.Property<int?>("PositionId")
                        .HasColumnType("integer")
                        .HasColumnName("position_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_profile");

                    b.HasIndex("PositionId")
                        .HasDatabaseName("ix_profile_position_id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_profile_user_id");

                    b.ToTable("profile", "business");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Vladimir",
                            LastName = "Leontev",
                            PositionId = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Bill",
                            LastName = "Gates",
                            PositionId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.ProfileLinkSubdivisionDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsHead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_head");

                    b.Property<int>("ProfileId")
                        .HasColumnType("integer")
                        .HasColumnName("profile_id");

                    b.Property<int>("SubdivisionId")
                        .HasColumnType("integer")
                        .HasColumnName("subdivision_id");

                    b.HasKey("Id")
                        .HasName("pk_profile_link_subdivision");

                    b.HasIndex("ProfileId")
                        .IsUnique()
                        .HasDatabaseName("ix_profile_link_subdivision_profile_id");

                    b.HasIndex("SubdivisionId")
                        .HasDatabaseName("ix_profile_link_subdivision_subdivision_id");

                    b.HasIndex("ProfileId", "SubdivisionId")
                        .IsUnique()
                        .HasDatabaseName("ix_profile_link_subdivision_profile_id_subdivision_id");

                    b.ToTable("profile_link_subdivision", "business");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsHead = true,
                            ProfileId = 2,
                            SubdivisionId = 1
                        });
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.QuestionDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("description");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("is_required");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("question_type_id");

                    b.Property<int>("RequirementTemplateId")
                        .HasColumnType("integer")
                        .HasColumnName("requirement_template_id");

                    b.HasKey("Id")
                        .HasName("pk_question");

                    b.HasIndex("QuestionTypeId")
                        .HasDatabaseName("ix_question_question_type_id");

                    b.HasIndex("RequirementTemplateId")
                        .HasDatabaseName("ix_question_requirement_template_id");

                    b.ToTable("question", "business");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            Description = "Номер офиса: ",
                            IsRequired = true,
                            QuestionTypeId = 4,
                            RequirementTemplateId = 1
                        },
                        new
                        {
                            Id = 11,
                            Description = "Ваша проблема: ",
                            IsRequired = true,
                            QuestionTypeId = 5,
                            RequirementTemplateId = 1
                        });
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.RequirementCategoryLinkProfileDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProfileId")
                        .HasColumnType("integer")
                        .HasColumnName("profile_id");

                    b.Property<int>("RequirementCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("requirement_category_id");

                    b.HasKey("Id")
                        .HasName("pk_requirement_category_link_profile");

                    b.HasIndex("ProfileId")
                        .HasDatabaseName("ix_requirement_category_link_profile_profile_id");

                    b.HasIndex("RequirementCategoryId", "ProfileId")
                        .IsUnique()
                        .HasDatabaseName("ix_requirement_category_link_profile_requirement_category_id_p");

                    b.ToTable("requirement_category_link_profile", "business");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProfileId = 1,
                            RequirementCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            ProfileId = 2,
                            RequirementCategoryId = 1
                        });
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.RequirementCommentDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("RequirementId")
                        .HasColumnType("integer")
                        .HasColumnName("requirement_id");

                    b.Property<int>("SenderProfileId")
                        .HasColumnType("integer")
                        .HasColumnName("sender_profile_id");

                    b.HasKey("Id")
                        .HasName("pk_requirement_comment");

                    b.HasIndex("RequirementId")
                        .HasDatabaseName("ix_requirement_comment_requirement_id");

                    b.HasIndex("SenderProfileId")
                        .HasDatabaseName("ix_requirement_comment_sender_profile_id");

                    b.ToTable("requirement_comment", "business");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "That's all trash! Let's do it again!",
                            RequirementId = 1,
                            SenderProfileId = 2
                        });
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.RequirementDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<int>("OutgoingNumber")
                        .HasColumnType("integer")
                        .HasColumnName("outgoing_number");

                    b.Property<int>("ProfileId")
                        .HasColumnType("integer")
                        .HasColumnName("profile_id");

                    b.Property<int?>("RequirementCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("requirement_category_id");

                    b.Property<int>("RequirementStateId")
                        .HasColumnType("integer")
                        .HasColumnName("requirement_state_id");

                    b.Property<int>("RequirementTemplateId")
                        .HasColumnType("integer")
                        .HasColumnName("requirement_template_id");

                    b.HasKey("Id")
                        .HasName("pk_requirement");

                    b.HasIndex("ProfileId")
                        .HasDatabaseName("ix_requirement_profile_id");

                    b.HasIndex("RequirementCategoryId")
                        .HasDatabaseName("ix_requirement_requirement_category_id");

                    b.HasIndex("RequirementStateId")
                        .HasDatabaseName("ix_requirement_requirement_state_id");

                    b.HasIndex("RequirementTemplateId")
                        .HasDatabaseName("ix_requirement_requirement_template_id");

                    b.ToTable("requirement", "business");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTimeOffset(new DateTime(2023, 6, 30, 3, 46, 0, 306, DateTimeKind.Unspecified).AddTicks(2499), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "ТЗ программистам",
                            OutgoingNumber = 1,
                            ProfileId = 1,
                            RequirementCategoryId = 7,
                            RequirementStateId = 1,
                            RequirementTemplateId = 1
                        });
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.RequirementLinkFileDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("file_id");

                    b.Property<int>("RequirementId")
                        .HasColumnType("integer")
                        .HasColumnName("requirement_id");

                    b.HasKey("Id")
                        .HasName("pk_requirement_link_file");

                    b.HasIndex("FileId")
                        .IsUnique()
                        .HasDatabaseName("ix_requirement_link_file_file_id");

                    b.HasIndex("RequirementId", "FileId")
                        .IsUnique()
                        .HasDatabaseName("ix_requirement_link_file_requirement_id_file_id");

                    b.ToTable("requirement_link_file", "business");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.RequirementLinkNotificationDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("NotificationId")
                        .HasColumnType("integer")
                        .HasColumnName("notification_id");

                    b.Property<int>("RequirementId")
                        .HasColumnType("integer")
                        .HasColumnName("requirement_id");

                    b.HasKey("Id")
                        .HasName("pk_requirement_link_notification");

                    b.HasIndex("NotificationId")
                        .IsUnique()
                        .HasDatabaseName("ix_requirement_link_notification_notification_id");

                    b.HasIndex("RequirementId")
                        .HasDatabaseName("ix_requirement_link_notification_requirement_id");

                    b.ToTable("requirement_link_notification", "business");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.RequirementLinkProfileDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsArchive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archive");

                    b.Property<int>("ProfileId")
                        .HasColumnType("integer")
                        .HasColumnName("profile_id");

                    b.Property<int>("RequirementId")
                        .HasColumnType("integer")
                        .HasColumnName("requirement_id");

                    b.HasKey("Id")
                        .HasName("pk_requirement_link_profile");

                    b.HasIndex("ProfileId")
                        .HasDatabaseName("ix_requirement_link_profile_profile_id");

                    b.HasIndex("RequirementId", "ProfileId")
                        .IsUnique()
                        .HasDatabaseName("ix_requirement_link_profile_requirement_id_profile_id");

                    b.ToTable("requirement_link_profile", "business");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.RequirementStageDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<int>("ProfileId")
                        .HasColumnType("integer")
                        .HasColumnName("profile_id");

                    b.Property<int>("RequirementId")
                        .HasColumnType("integer")
                        .HasColumnName("requirement_id");

                    b.Property<int>("StateId")
                        .HasColumnType("integer")
                        .HasColumnName("state_id");

                    b.HasKey("Id")
                        .HasName("pk_requirement_stage");

                    b.HasIndex("ProfileId")
                        .HasDatabaseName("ix_requirement_stage_profile_id");

                    b.HasIndex("RequirementId")
                        .HasDatabaseName("ix_requirement_stage_requirement_id");

                    b.HasIndex("StateId")
                        .HasDatabaseName("ix_requirement_stage_state_id");

                    b.ToTable("requirement_stage", "business");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTimeOffset(new DateTime(2023, 6, 30, 3, 46, 0, 305, DateTimeKind.Unspecified).AddTicks(8072), new TimeSpan(0, 0, 0, 0, 0)),
                            ProfileId = 1,
                            RequirementId = 1,
                            StateId = 1
                        });
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.RequirementStageLinkRequirementCommentDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RequirementCommentId")
                        .HasColumnType("integer")
                        .HasColumnName("requirement_comment_id");

                    b.Property<int>("RequirementStageId")
                        .HasColumnType("integer")
                        .HasColumnName("requirement_stage_id");

                    b.HasKey("Id")
                        .HasName("pk_requirement_stage_link_requirement_comment");

                    b.HasIndex("RequirementCommentId")
                        .IsUnique()
                        .HasDatabaseName("ix_requirement_stage_link_requirement_comment_requirement_comm");

                    b.HasIndex("RequirementStageId")
                        .IsUnique()
                        .HasDatabaseName("ix_requirement_stage_link_requirement_comment_requirement_stag");

                    b.HasIndex("RequirementStageId", "RequirementCommentId")
                        .IsUnique()
                        .HasDatabaseName("ix_requirement_stage_link_requirement_comment_requirement_stag1");

                    b.ToTable("requirement_stage_link_requirement_comment", "business");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RequirementCommentId = 1,
                            RequirementStageId = 1
                        });
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.RequirementTemplateDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("description");

                    b.Property<bool>("HasRequirementCategory")
                        .HasColumnType("boolean")
                        .HasColumnName("has_requirement_category");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.HasKey("Id")
                        .HasName("pk_requirement_template");

                    b.ToTable("requirement_template", "business");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTimeOffset(new DateTime(2023, 6, 30, 3, 46, 0, 305, DateTimeKind.Unspecified).AddTicks(8588), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Эта заявка имеет своей целью выявление и решение проблем в сфере IT обеспечения предприятия.",
                            HasRequirementCategory = true,
                            Name = "Заявка по IT обеспечению",
                            UpdateDate = new DateTimeOffset(new DateTime(2023, 6, 30, 3, 46, 0, 305, DateTimeKind.Unspecified).AddTicks(8588), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.SubdivisionLinkSubdivisionDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SubdivisionId")
                        .HasColumnType("integer")
                        .HasColumnName("subdivision_id");

                    b.Property<int?>("SubdivisionParentId")
                        .HasColumnType("integer")
                        .HasColumnName("subdivision_parent_id");

                    b.HasKey("Id")
                        .HasName("pk_subdivision_link_subdivision");

                    b.HasIndex("SubdivisionId")
                        .IsUnique()
                        .HasDatabaseName("ix_subdivision_link_subdivision_subdivision_id");

                    b.HasIndex("SubdivisionParentId")
                        .HasDatabaseName("ix_subdivision_link_subdivision_subdivision_parent_id");

                    b.HasIndex("SubdivisionId", "SubdivisionParentId")
                        .IsUnique()
                        .HasDatabaseName("ix_subdivision_link_subdivision_subdivision_id_subdivision_par");

                    b.ToTable("subdivision_link_subdivision", "business");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SubdivisionId = 1
                        },
                        new
                        {
                            Id = 2,
                            SubdivisionId = 2,
                            SubdivisionParentId = 1
                        });
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.UserAnswerDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProfileId")
                        .HasColumnType("integer")
                        .HasColumnName("profile_id");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<int>("RequirementId")
                        .HasColumnType("integer")
                        .HasColumnName("requirement_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.Property<int?>("VariantId")
                        .HasColumnType("integer")
                        .HasColumnName("variant_id");

                    b.HasKey("Id")
                        .HasName("pk_user_answer");

                    b.HasIndex("ProfileId")
                        .HasDatabaseName("ix_user_answer_profile_id");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_user_answer_question_id");

                    b.HasIndex("RequirementId")
                        .HasDatabaseName("ix_user_answer_requirement_id");

                    b.ToTable("user_answer", "business");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.VariantDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("description");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.HasKey("Id")
                        .HasName("pk_variant");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_variant_question_id");

                    b.ToTable("variant", "business");

                    b.HasData(
                        new
                        {
                            Id = 40,
                            Description = "1201",
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 41,
                            Description = "1202",
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 42,
                            Description = "1203",
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 43,
                            Description = "1204",
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 44,
                            Description = "1205",
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 45,
                            Description = "1206",
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 46,
                            Description = "1207",
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 47,
                            Description = "1208",
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 48,
                            Description = "1209",
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 49,
                            Description = "1210",
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 50,
                            Description = "1211",
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 51,
                            Description = "1212",
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 52,
                            Description = "1213",
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 53,
                            Description = "1214",
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 54,
                            Description = "1215",
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 55,
                            Description = "1216",
                            QuestionId = 10
                        },
                        new
                        {
                            Id = 56,
                            Description = "1217",
                            QuestionId = 10
                        });
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Dictionaries.PositionDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_position");

                    b.HasIndex("Description")
                        .IsUnique()
                        .HasDatabaseName("ix_position_description");

                    b.ToTable("position", "dictionaries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Генеральный директор"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Руководитель отдела"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Руководитель проекта"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Разработчик"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Секретарь"
                        });
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Dictionaries.QuestionTypeDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_question_type");

                    b.ToTable("question_type", "dictionaries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Простой текстовый вопрос"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Вопрос с одним вариантом"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Вопрос с множеством вариантов"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Вопрос с выпадающим списком"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Развернутый ответ"
                        });
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Dictionaries.RequirementCategoryDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("description");

                    b.Property<bool>("HasAgreement")
                        .HasColumnType("boolean")
                        .HasColumnName("has_agreement");

                    b.Property<int>("RequirementCategoryTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("requirement_category_type_id");

                    b.HasKey("Id")
                        .HasName("pk_requirement_category");

                    b.HasIndex("RequirementCategoryTypeId")
                        .HasDatabaseName("ix_requirement_category_requirement_category_type_id");

                    b.HasIndex("Description", "RequirementCategoryTypeId")
                        .IsUnique()
                        .HasDatabaseName("ix_requirement_category_description_requirement_category_type_");

                    b.ToTable("requirement_category", "dictionaries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Отсутствие доступа к сайту",
                            HasAgreement = false,
                            RequirementCategoryTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Подключение к онлайн конференции",
                            HasAgreement = false,
                            RequirementCategoryTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Создание онлайн конференции",
                            HasAgreement = false,
                            RequirementCategoryTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            Description = "Компьютер",
                            HasAgreement = false,
                            RequirementCategoryTypeId = 2
                        },
                        new
                        {
                            Id = 5,
                            Description = "Ноутбук",
                            HasAgreement = false,
                            RequirementCategoryTypeId = 2
                        },
                        new
                        {
                            Id = 6,
                            Description = "Перемещение рабочего места",
                            HasAgreement = false,
                            RequirementCategoryTypeId = 2
                        },
                        new
                        {
                            Id = 7,
                            Description = "Принтер (МФУ)",
                            HasAgreement = false,
                            RequirementCategoryTypeId = 2
                        },
                        new
                        {
                            Id = 8,
                            Description = "Принтер (МФУ) / Замена картриджа",
                            HasAgreement = false,
                            RequirementCategoryTypeId = 2
                        },
                        new
                        {
                            Id = 9,
                            Description = "Переадресация электронной почты",
                            HasAgreement = false,
                            RequirementCategoryTypeId = 3
                        },
                        new
                        {
                            Id = 10,
                            Description = "Создание почтового ящика",
                            HasAgreement = false,
                            RequirementCategoryTypeId = 3
                        },
                        new
                        {
                            Id = 11,
                            Description = "Удаление почтового ящика",
                            HasAgreement = false,
                            RequirementCategoryTypeId = 3
                        },
                        new
                        {
                            Id = 12,
                            Description = "Пополнение счета",
                            HasAgreement = false,
                            RequirementCategoryTypeId = 4
                        },
                        new
                        {
                            Id = 13,
                            Description = "Другое",
                            HasAgreement = false,
                            RequirementCategoryTypeId = 5
                        },
                        new
                        {
                            Id = 14,
                            Description = "Настройка почтового ящика",
                            HasAgreement = false,
                            RequirementCategoryTypeId = 5
                        },
                        new
                        {
                            Id = 15,
                            Description = "Настройка приложения",
                            HasAgreement = false,
                            RequirementCategoryTypeId = 5
                        },
                        new
                        {
                            Id = 16,
                            Description = "1С: CRM",
                            HasAgreement = false,
                            RequirementCategoryTypeId = 6
                        },
                        new
                        {
                            Id = 17,
                            Description = "1С: ECM",
                            HasAgreement = false,
                            RequirementCategoryTypeId = 6
                        },
                        new
                        {
                            Id = 18,
                            Description = "1С: ERP",
                            HasAgreement = false,
                            RequirementCategoryTypeId = 6
                        },
                        new
                        {
                            Id = 19,
                            Description = "Завершение сеанса 1C",
                            HasAgreement = false,
                            RequirementCategoryTypeId = 6
                        },
                        new
                        {
                            Id = 20,
                            Description = "Настройка",
                            HasAgreement = false,
                            RequirementCategoryTypeId = 6
                        },
                        new
                        {
                            Id = 21,
                            Description = "Удаление",
                            HasAgreement = false,
                            RequirementCategoryTypeId = 6
                        },
                        new
                        {
                            Id = 22,
                            Description = "Установка",
                            HasAgreement = false,
                            RequirementCategoryTypeId = 6
                        },
                        new
                        {
                            Id = 23,
                            Description = "Подключение к Wi-Fi",
                            HasAgreement = false,
                            RequirementCategoryTypeId = 7
                        },
                        new
                        {
                            Id = 24,
                            Description = "Настройка",
                            HasAgreement = false,
                            RequirementCategoryTypeId = 8
                        },
                        new
                        {
                            Id = 25,
                            Description = "Другое",
                            HasAgreement = false,
                            RequirementCategoryTypeId = 9
                        },
                        new
                        {
                            Id = 26,
                            Description = "Переадресация",
                            HasAgreement = false,
                            RequirementCategoryTypeId = 9
                        },
                        new
                        {
                            Id = 27,
                            Description = "Предоставление записи разговора",
                            HasAgreement = false,
                            RequirementCategoryTypeId = 9
                        });
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Dictionaries.RequirementCategoryTypeDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_requirement_category_type");

                    b.HasIndex("Description")
                        .IsUnique()
                        .HasDatabaseName("ix_requirement_category_type_description");

                    b.ToTable("requirement_category_type", "dictionaries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Интернет"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Компьютерная техника"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Корпоративная почта"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Мобильная связь"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Мобильные устройства"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Программное обеспечение"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Сетевое оборудование"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Электронная подпись"
                        },
                        new
                        {
                            Id = 9,
                            Description = "IP-Телефония"
                        });
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Dictionaries.RequirementStateDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_requirement_state");

                    b.ToTable("requirement_state", "dictionaries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Создана"
                        },
                        new
                        {
                            Id = 2,
                            Description = "В рассмотрении"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Согласована"
                        },
                        new
                        {
                            Id = 4,
                            Description = "В исполнении"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Отказано"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Закрыта"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Выполнена"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Переназначено"
                        });
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Dictionaries.RoleDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_role");

                    b.ToTable("role", "dictionaries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "USER",
                            Description = "Пользователь"
                        },
                        new
                        {
                            Id = 2,
                            Code = "ADMIN",
                            Description = "Администратор"
                        },
                        new
                        {
                            Id = 3,
                            Code = "API",
                            Description = "Api-клиент"
                        });
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Dictionaries.SubdivisionDataModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_subdivision");

                    b.HasIndex("Description")
                        .IsUnique()
                        .HasDatabaseName("ix_subdivision_description");

                    b.ToTable("subdivision", "dictionaries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Helpdesk International"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Helpdesk IT"
                        });
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Admin.UserDataModel", b =>
                {
                    b.HasOne("Helpdesk.Domain.Models.Dictionaries.RoleDataModel", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Admin.UserSessionDataModel", b =>
                {
                    b.HasOne("Helpdesk.Domain.Models.Admin.UserDataModel", "User")
                        .WithMany("UserSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_session_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.FileDataModel", b =>
                {
                    b.HasOne("Helpdesk.Domain.Models.Admin.UserDataModel", "UploadUser")
                        .WithMany("Files")
                        .HasForeignKey("UploadUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_file_user_upload_user_id");

                    b.Navigation("UploadUser");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.NotificationDataModel", b =>
                {
                    b.HasOne("Helpdesk.Domain.Models.Admin.UserDataModel", "RecipientUser")
                        .WithMany("Notifications")
                        .HasForeignKey("RecipientUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notification_user_recipient_user_id");

                    b.Navigation("RecipientUser");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.ProfileDataModel", b =>
                {
                    b.HasOne("Helpdesk.Domain.Models.Dictionaries.PositionDataModel", "Position")
                        .WithMany("Profiles")
                        .HasForeignKey("PositionId")
                        .HasConstraintName("fk_profile_position_data_model_position_id");

                    b.HasOne("Helpdesk.Domain.Models.Admin.UserDataModel", "User")
                        .WithOne("Profile")
                        .HasForeignKey("Helpdesk.Domain.Models.Business.ProfileDataModel", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_profile_user_user_id");

                    b.Navigation("Position");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.ProfileLinkSubdivisionDataModel", b =>
                {
                    b.HasOne("Helpdesk.Domain.Models.Business.ProfileDataModel", "Profile")
                        .WithOne("ProfileLinkSubdivision")
                        .HasForeignKey("Helpdesk.Domain.Models.Business.ProfileLinkSubdivisionDataModel", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_profile_link_subdivision_profile_profile_id");

                    b.HasOne("Helpdesk.Domain.Models.Dictionaries.SubdivisionDataModel", "Subdivision")
                        .WithMany("ProfileLinksSubdivision")
                        .HasForeignKey("SubdivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_profile_link_subdivision_subdivision_subdivision_id");

                    b.Navigation("Profile");

                    b.Navigation("Subdivision");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.QuestionDataModel", b =>
                {
                    b.HasOne("Helpdesk.Domain.Models.Dictionaries.QuestionTypeDataModel", "QuestionType")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_question_type_question_type_id");

                    b.HasOne("Helpdesk.Domain.Models.Business.RequirementTemplateDataModel", "RequirementTemplate")
                        .WithMany("Questions")
                        .HasForeignKey("RequirementTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_requirement_template_requirement_template_id");

                    b.Navigation("QuestionType");

                    b.Navigation("RequirementTemplate");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.RequirementCategoryLinkProfileDataModel", b =>
                {
                    b.HasOne("Helpdesk.Domain.Models.Business.ProfileDataModel", "Profile")
                        .WithMany("RequirementCategoryLinkProfile")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_requirement_category_link_profile_profile_profile_id");

                    b.HasOne("Helpdesk.Domain.Models.Dictionaries.RequirementCategoryDataModel", "RequirementCategory")
                        .WithMany("RequirementCategoryLinkProfile")
                        .HasForeignKey("RequirementCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_requirement_category_link_profile_requirement_category_requ");

                    b.Navigation("Profile");

                    b.Navigation("RequirementCategory");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.RequirementCommentDataModel", b =>
                {
                    b.HasOne("Helpdesk.Domain.Models.Business.RequirementDataModel", "Requirement")
                        .WithMany("RequirementComments")
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_requirement_comment_requirement_requirement_id");

                    b.HasOne("Helpdesk.Domain.Models.Business.ProfileDataModel", "Profile")
                        .WithMany("RequirementComments")
                        .HasForeignKey("SenderProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_requirement_comment_profile_profile_id");

                    b.Navigation("Profile");

                    b.Navigation("Requirement");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.RequirementDataModel", b =>
                {
                    b.HasOne("Helpdesk.Domain.Models.Business.ProfileDataModel", "Profile")
                        .WithMany("Requirements")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_requirement_profile_profile_id");

                    b.HasOne("Helpdesk.Domain.Models.Dictionaries.RequirementCategoryDataModel", "RequirementCategory")
                        .WithMany("Requirements")
                        .HasForeignKey("RequirementCategoryId")
                        .HasConstraintName("fk_requirement_requirement_category_requirement_category_id");

                    b.HasOne("Helpdesk.Domain.Models.Dictionaries.RequirementStateDataModel", "RequirementState")
                        .WithMany("Requirements")
                        .HasForeignKey("RequirementStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_requirement_requirement_state_requirement_state_id");

                    b.HasOne("Helpdesk.Domain.Models.Business.RequirementTemplateDataModel", "RequirementTemplate")
                        .WithMany()
                        .HasForeignKey("RequirementTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_requirement_requirement_template_requirement_template_id");

                    b.Navigation("Profile");

                    b.Navigation("RequirementCategory");

                    b.Navigation("RequirementState");

                    b.Navigation("RequirementTemplate");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.RequirementLinkFileDataModel", b =>
                {
                    b.HasOne("Helpdesk.Domain.Models.Business.FileDataModel", "File")
                        .WithOne("RequirementLinkFile")
                        .HasForeignKey("Helpdesk.Domain.Models.Business.RequirementLinkFileDataModel", "FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_requirement_link_file_file_data_model_file_id");

                    b.HasOne("Helpdesk.Domain.Models.Business.RequirementDataModel", "Requirement")
                        .WithMany("RequirementLinkFiles")
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_requirement_link_file_requirement_requirement_id");

                    b.Navigation("File");

                    b.Navigation("Requirement");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.RequirementLinkNotificationDataModel", b =>
                {
                    b.HasOne("Helpdesk.Domain.Models.Business.NotificationDataModel", "Notification")
                        .WithOne("RequirementLinkNotification")
                        .HasForeignKey("Helpdesk.Domain.Models.Business.RequirementLinkNotificationDataModel", "NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_requirement_link_notification_notification_notification_id");

                    b.HasOne("Helpdesk.Domain.Models.Business.RequirementDataModel", "Requirement")
                        .WithMany("RequirementLinkNotification")
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_requirement_link_notification_requirement_requirement_id");

                    b.Navigation("Notification");

                    b.Navigation("Requirement");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.RequirementLinkProfileDataModel", b =>
                {
                    b.HasOne("Helpdesk.Domain.Models.Business.ProfileDataModel", "Profile")
                        .WithMany("RequirementLinkProfiles")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_requirement_link_profile_profile_profile_id");

                    b.HasOne("Helpdesk.Domain.Models.Business.RequirementDataModel", "Requirement")
                        .WithMany("RequirementLinkProfiles")
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_requirement_link_profile_requirement_requirement_id");

                    b.Navigation("Profile");

                    b.Navigation("Requirement");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.RequirementStageDataModel", b =>
                {
                    b.HasOne("Helpdesk.Domain.Models.Business.ProfileDataModel", "Profile")
                        .WithMany("RequirementStages")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_requirement_stage_profile_profile_id");

                    b.HasOne("Helpdesk.Domain.Models.Business.RequirementDataModel", "Requirement")
                        .WithMany("Stages")
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_requirement_stage_requirement_data_model_requirement_id");

                    b.HasOne("Helpdesk.Domain.Models.Dictionaries.RequirementStateDataModel", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_requirement_stage_requirement_state_state_id");

                    b.Navigation("Profile");

                    b.Navigation("Requirement");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.RequirementStageLinkRequirementCommentDataModel", b =>
                {
                    b.HasOne("Helpdesk.Domain.Models.Business.RequirementCommentDataModel", "RequirementComment")
                        .WithOne("RequirementStageLinkRequirementComment")
                        .HasForeignKey("Helpdesk.Domain.Models.Business.RequirementStageLinkRequirementCommentDataModel", "RequirementCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_requirement_stage_link_requirement_comment_requirement_comm");

                    b.HasOne("Helpdesk.Domain.Models.Business.RequirementStageDataModel", "RequirementStage")
                        .WithOne("RequirementStageLinkRequirementComment")
                        .HasForeignKey("Helpdesk.Domain.Models.Business.RequirementStageLinkRequirementCommentDataModel", "RequirementStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_requirement_stage_link_requirement_comment_requirement_stag");

                    b.Navigation("RequirementComment");

                    b.Navigation("RequirementStage");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.SubdivisionLinkSubdivisionDataModel", b =>
                {
                    b.HasOne("Helpdesk.Domain.Models.Dictionaries.SubdivisionDataModel", "Subdivision")
                        .WithOne("SubdivisionParentLinkSubdivision")
                        .HasForeignKey("Helpdesk.Domain.Models.Business.SubdivisionLinkSubdivisionDataModel", "SubdivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subdivision_link_subdivision_subdivision_subdivision_id");

                    b.HasOne("Helpdesk.Domain.Models.Dictionaries.SubdivisionDataModel", "SubdivisionParent")
                        .WithMany("SubdivisionChildLinksSubdivision")
                        .HasForeignKey("SubdivisionParentId")
                        .HasConstraintName("fk_subdivision_link_subdivision_subdivision_subdivision_parent");

                    b.Navigation("Subdivision");

                    b.Navigation("SubdivisionParent");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.UserAnswerDataModel", b =>
                {
                    b.HasOne("Helpdesk.Domain.Models.Business.ProfileDataModel", "Profile")
                        .WithMany("UserAnswers")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_answer_profile_profile_id");

                    b.HasOne("Helpdesk.Domain.Models.Business.QuestionDataModel", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_answer_question_question_id");

                    b.HasOne("Helpdesk.Domain.Models.Business.RequirementDataModel", "Requirement")
                        .WithMany("UserAnswers")
                        .HasForeignKey("RequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_answer_requirement_data_model_requirement_id");

                    b.Navigation("Profile");

                    b.Navigation("Question");

                    b.Navigation("Requirement");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.VariantDataModel", b =>
                {
                    b.HasOne("Helpdesk.Domain.Models.Business.QuestionDataModel", "Question")
                        .WithMany("Variants")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_variant_question_question_id");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Dictionaries.RequirementCategoryDataModel", b =>
                {
                    b.HasOne("Helpdesk.Domain.Models.Dictionaries.RequirementCategoryTypeDataModel", "RequirementCategoryType")
                        .WithMany("RequirementCategories")
                        .HasForeignKey("RequirementCategoryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_requirement_category_requirement_category_type_data_model_r");

                    b.Navigation("RequirementCategoryType");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Admin.UserDataModel", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Notifications");

                    b.Navigation("Profile");

                    b.Navigation("UserSessions");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.FileDataModel", b =>
                {
                    b.Navigation("RequirementLinkFile");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.NotificationDataModel", b =>
                {
                    b.Navigation("RequirementLinkNotification");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.ProfileDataModel", b =>
                {
                    b.Navigation("ProfileLinkSubdivision");

                    b.Navigation("RequirementCategoryLinkProfile");

                    b.Navigation("RequirementComments");

                    b.Navigation("RequirementLinkProfiles");

                    b.Navigation("RequirementStages");

                    b.Navigation("Requirements");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.QuestionDataModel", b =>
                {
                    b.Navigation("UserAnswers");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.RequirementCommentDataModel", b =>
                {
                    b.Navigation("RequirementStageLinkRequirementComment");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.RequirementDataModel", b =>
                {
                    b.Navigation("RequirementComments");

                    b.Navigation("RequirementLinkFiles");

                    b.Navigation("RequirementLinkNotification");

                    b.Navigation("RequirementLinkProfiles");

                    b.Navigation("Stages");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.RequirementStageDataModel", b =>
                {
                    b.Navigation("RequirementStageLinkRequirementComment");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Business.RequirementTemplateDataModel", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Dictionaries.PositionDataModel", b =>
                {
                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Dictionaries.QuestionTypeDataModel", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Dictionaries.RequirementCategoryDataModel", b =>
                {
                    b.Navigation("RequirementCategoryLinkProfile");

                    b.Navigation("Requirements");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Dictionaries.RequirementCategoryTypeDataModel", b =>
                {
                    b.Navigation("RequirementCategories");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Dictionaries.RequirementStateDataModel", b =>
                {
                    b.Navigation("Requirements");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Dictionaries.RoleDataModel", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Helpdesk.Domain.Models.Dictionaries.SubdivisionDataModel", b =>
                {
                    b.Navigation("ProfileLinksSubdivision");

                    b.Navigation("SubdivisionChildLinksSubdivision");

                    b.Navigation("SubdivisionParentLinkSubdivision");
                });
#pragma warning restore 612, 618
        }
    }
}
