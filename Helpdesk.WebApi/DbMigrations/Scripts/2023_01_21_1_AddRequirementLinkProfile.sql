create table business.requirement_link_profile
(
    id             integer generated by default as identity
        constraint pk_requirement_link_profile
            primary key,
    requirement_id integer not null
        constraint fk_requirement_link_profile_requirement_requirement_id
            references business.requirement
            on delete cascade,
    profile_id     integer not null
        constraint fk_requirement_link_profile_profile_profile_id
            references business.profile
            on delete cascade,
    is_archive     boolean not null
);

alter table business.requirement_link_profile
    owner to postgres;

create index ix_requirement_link_profile_profile_id
    on business.requirement_link_profile (profile_id);

create unique index ix_requirement_link_profile_requirement_id_profile_id
    on business.requirement_link_profile (requirement_id, profile_id);

-- 

insert into business.requirement_link_profile (requirement_id, profile_id, is_archive)
    (select requirement_id,
            profile_id,
            is_archive
     from (select r.id                  requirement_id,
                  r.profile_id,
                  cast(0 as boolean) as is_archive
           from business.requirement r

           union

           select r.id                  requirement_id,
                  rlp.profile_id,
                  cast(0 as boolean) as is_archive
           from dictionaries.requirement_category rc
                    inner join business.requirement_category_link_profile rlp
                               on rlp.requirement_category_id = rc.id
                    inner join business.requirement r
                               on r.requirement_category_id = rlp.requirement_category_id) l
     order by l.requirement_id, l.profile_id);



